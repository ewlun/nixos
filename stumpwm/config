;; -*-lisp-*-

;; (let ((asdf-init (merge-pathnames ".roswell/lisp/quicklisp/asdf.lisp"
;; 				       (user-homedir-pathname))))
;;   (when (probe-file asdf-init)
;;     (load asdf-init)))

;; (let ((quicklisp-init (merge-pathnames ".roswell/lisp/quicklisp/setup.lisp"
;; 				       (user-homedir-pathname))))
;;   (when (probe-file quicklisp-init)
;;     (load quicklisp-init)))

;; Here is a sample .stumpwmrc file

(in-package :stumpwm)

(set-module-dir (merge-pathnames ".config/stumpwm/modules/"
		  (user-homedir-pathname)))


(ql:quickload "slynk")

;; change the prefix key to something else
(set-prefix-key (kbd "s-a"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

(defcommand slynk (port) ((:string "Port number: "))
  (sb-thread:make-thread
   (lambda ()
     (slynk:create-server :port (parse-integer port) :dont-close t))
   :name "slynk-manual"))

(setf *ignore-wm-inc-hints* t)
(setf *mouse-focus-policy* :click)


(ql:quickload "clx-truetype")
(load-module "ttf-fonts")
(setf xft:*font-dirs* (append xft:*font-dirs* (list "/run/current-system/sw/share/X11/fonts")))

;; Tell clx-truetype about the fonts you have installed. You really only need to do this once,
;; but putting it here means you will not forget in the future.
(xft:cache-fonts)

(set-font (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Book" :size 20))

(defun show-battery-charge ()
  (run-shell-command "sh /home/edwin/show_battery.sh" t))

(setf *window-format* "%m%t")
(setf *screen-mode-line-format*
      (list
       "[^B^3%n^b] ^4%W"
       "^>"
       ;;"%m"
       '(:eval (format nil "^5|Battery:~D" (show-battery-charge)))
       "^5|%d"
       ))

(setf *mode-line-timeout* 2)
(enable-mode-line (current-screen) (current-head) t)

;; Read some doc
(define-key *root-map* (kbd "d") "exec gv")
;; Browse somewhere
(define-key *root-map* (kbd "b") "exec firefox")

;; Web jump (works for DuckDuckGo and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

(make-web-jump "duckduckgo" "firefox https://duckduckgo.com/?q=")
(make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

;; C-t M-s is a terrble binding, but you get the idea.
(define-key *root-map* (kbd "M-s") "duckduckgo")
(define-key *root-map* (kbd "i") "imdb")


;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

